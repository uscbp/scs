package HopfieldModel.HopfieldNetwork.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class HopfieldNetwork extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: HopfieldModel
//moduleName:  HopfieldNetwork
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinInt2 input; // 
public  NslDoutDouble0 energy; // 
public  NslDoutInt2 output; // 
private  NslDouble2 mp; // 
private  NslDouble4 weight; // 

//methods 
public void initModule() 
{
	weight.set(0.0);
}

public void simTrain() 
{
	for(int k=0;k<size; k++) 
        {
		for(int l=0; l<size; l++) 
		{
			for(int i=0; i<size; i++)
			{
				for(int j=0; j<size; j++)
				{
					if (i==k&&j==l)
						weight.set(k, l, i, j,  0.0);
					else
						weight.set(k, l, i, j, __tempHopfieldNetwork3.setReference(__tempHopfieldNetwork0.setReference(weight.get(k, l, i, j)).get()+(double)__tempHopfieldNetwork1.setReference(input.get(k, l)).get()*(double)__tempHopfieldNetwork2.setReference(input.get(i, j)).get()/(size*size)));
				}
			}
		}
	}
}

public void initRun()
{
	output.set(input);
}

public void simRun() 
{
	int k = NslRandom.eval(0,size-1);
	int l = NslRandom.eval(0,size-1);
	mp.set(k, l, NslSum.eval(__tempHopfieldNetwork5.setReference(NslElemMult.eval(__tempHopfieldNetwork5.get(), __tempHopfieldNetwork4.setReference(weight.get(k, l)), (new NslDouble2(output))))));
	output.set(k, l, NslStep.eval(__tempHopfieldNetwork6.setReference(mp.get(k, l)),0,-1,1));

	energy.set(  0.0);
	for (k=0; k<size; k++)
	{
		for (l=0; l<size; l++)
		{
			for (int i=0; i<size; i++)
			{
				for (int j=0; j<size; j++)
				{
					energy.set(__tempHopfieldNetwork12.setReference(energy.get()+(double)(__tempHopfieldNetwork11.setReference(__tempHopfieldNetwork10.setReference(__tempHopfieldNetwork7.setReference(weight.get(k, l, i, j)).get()*__tempHopfieldNetwork8.setReference(mp.get(k, l)).get()).get()*__tempHopfieldNetwork9.setReference(mp.get(i, j)).get())).get()));
				}
			}
		}
	}
	energy.set(  __tempHopfieldNetwork13.setReference(-0.5*energy.get()));
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int size;

	/* Temporary variables */
		NslDouble0 __tempHopfieldNetwork0 = new NslDouble0();
		NslInt0 __tempHopfieldNetwork1 = new NslInt0();
		NslInt0 __tempHopfieldNetwork2 = new NslInt0();
		NslDouble0 __tempHopfieldNetwork3 = new NslDouble0();
		NslDouble2 __tempHopfieldNetwork4 = new NslDouble2(1, 1);
		NslDouble2 __tempHopfieldNetwork5 = new NslDouble2(1, 1);
		NslDouble0 __tempHopfieldNetwork6 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork7 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork8 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork9 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork10 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork11 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork12 = new NslDouble0();
		NslDouble0 __tempHopfieldNetwork13 = new NslDouble0();

	/* GENERIC CONSTRUCTOR: */
	public HopfieldNetwork(String nslName, NslModule nslParent, int size)
{
		super(nslName, nslParent);
		this.size=size;
		initSys();
		makeInstHopfieldNetwork(nslName, nslParent, size);
	}

	public void makeInstHopfieldNetwork(String nslName, NslModule nslParent, int size)
{ 
		Object[] nslArgs=new Object[]{size};
		callFromConstructorTop(nslArgs);
		input = new NslDinInt2("input", this, size, size);
		energy = new NslDoutDouble0("energy", this);
		output = new NslDoutInt2("output", this, size, size);
		mp = new NslDouble2("mp", this, size, size);
		weight = new NslDouble4("weight", this, size, size, size, size);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end HopfieldNetwork

