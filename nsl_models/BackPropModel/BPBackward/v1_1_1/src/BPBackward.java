package BackPropModel.BPBackward.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class BPBackward extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: BackPropModel
//moduleName:  BPBackward
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinFloat1 bInput; // 
public  NslDinFloat1 fInput; // 
public  NslDinFloat1 mf; // 
public  NslDoutFloat1 dh; // 
public  NslDoutFloat2 dw; // 
private  NslFloat1 delta; // 
private NslFloat0 lrate; // 

//methods 
public void initModule() 
{
	lrate.nslSetAccess('W');
	lrate.set(0.8f);
}

public void simTrain() 
{
	backwardPass();
}

public void backwardPass()
{
	for(int i=0; i<hidSize; i++)
	{
		for(int j=0; j<inSize; j++)
		{
			delta.set(i, __tempBPBackward5.setReference(__tempBPBackward4.setReference(__tempBPBackward0.setReference(mf.get(i)).get()*(__tempBPBackward2.setReference(1.0f-__tempBPBackward1.setReference(mf.get(i)).get())).get()).get()*__tempBPBackward3.setReference(bInput.get(i)).get()));
			dh.set(i, __tempBPBackward7.setReference(lrate.get()*__tempBPBackward6.setReference(delta.get(i)).get()));
			dw.set(j, i, __tempBPBackward10.setReference(__tempBPBackward8.setReference(dh.get(i)).get()*__tempBPBackward9.setReference(fInput.get(j)).get()));
		}
	}
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int inSize;
	int hidSize;

	/* Temporary variables */
		NslFloat0 __tempBPBackward0 = new NslFloat0();
		NslFloat0 __tempBPBackward1 = new NslFloat0();
		NslFloat0 __tempBPBackward2 = new NslFloat0();
		NslFloat0 __tempBPBackward3 = new NslFloat0();
		NslFloat0 __tempBPBackward4 = new NslFloat0();
		NslFloat0 __tempBPBackward5 = new NslFloat0();
		NslFloat0 __tempBPBackward6 = new NslFloat0();
		NslFloat0 __tempBPBackward7 = new NslFloat0();
		NslFloat0 __tempBPBackward8 = new NslFloat0();
		NslFloat0 __tempBPBackward9 = new NslFloat0();
		NslFloat0 __tempBPBackward10 = new NslFloat0();

	/* GENERIC CONSTRUCTOR: */
	public BPBackward(String nslName, NslModule nslParent, int inSize, int hidSize)
{
		super(nslName, nslParent);
		this.inSize=inSize;
		this.hidSize=hidSize;
		initSys();
		makeInstBPBackward(nslName, nslParent, inSize, hidSize);
	}

	public void makeInstBPBackward(String nslName, NslModule nslParent, int inSize, int hidSize)
{ 
		Object[] nslArgs=new Object[]{inSize, hidSize};
		callFromConstructorTop(nslArgs);
		bInput = new NslDinFloat1("bInput", this, hidSize);
		fInput = new NslDinFloat1("fInput", this, inSize);
		mf = new NslDinFloat1("mf", this, hidSize);
		dh = new NslDoutFloat1("dh", this, hidSize);
		dw = new NslDoutFloat2("dw", this, inSize, hidSize);
		delta = new NslFloat1("delta", this, hidSize);
		lrate = new NslFloat0("lrate", this);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end BPBackward

