package BackPropModel.BackPropLayers.v1_1_1.src;
import BackPropModel.BPForward.v1_1_1.src.*;
import BackPropModel.BPBackwardError.v1_1_1.src.*;
import BackPropModel.BPBackwardProp.v1_1_1.src.*;
import BackPropModel.BPBackward.v1_1_1.src.*;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class BackPropLayers extends NslJavaModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: BackPropModel
//moduleName:  BackPropLayers
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  BPForward fh; // 
public  BPForward fo; // 
public  BPBackwardError be; // 
public  BPBackwardProp bo; // 
public  BPBackward bh; // 
public  NslDinFloat1 in; // 
public  NslDinFloat1 desired; // 
public  NslDoutFloat1 out; // 
public  NslDoutFloat1 error; // 
public  NslDoutDouble0 tss; // 

//methods 
public void initModule()
{
	nslAddAreaCanvas("backPropOut", "output", out, 0.0, 1.0);
	nslAddTemporalCanvas("backPropOut", "error", error, -1.0, 1.0, NslColor.getColor("BLACK"));
	nslAddTemporalCanvas("backPropOut", "tss", tss, NslTemporalCanvas.TEMPORAL_MODE_EPOCH, 0.0, 2.0, 
		NslColor.getColor("BLACK"));
}
public void makeConn(){
    nslConnect(in,bh.fInput);
    nslConnect(in,fh.fInput);
    nslConnect(desired,be.desired);
    nslConnect(bh.dh,fh.dh);
    nslConnect(bh.dw,fh.dw);
    nslConnect(fh.mf,fo.fInput);
    nslConnect(fh.mf,bo.fInput);
    nslConnect(fh.mf,bh.mf);
    nslConnect(fo.mf,out);
    nslConnect(fo.mf,be.mf);
    nslConnect(fo.mf,bo.mf);
    nslConnect(fo.w,bo.w);
    nslConnect(bo.dh,fo.dh);
    nslConnect(bo.dw,fo.dw);
    nslConnect(bo.bOutput,bh.bInput);
    nslConnect(be.eOutput,bo.bInput);
    nslConnect(be.eOutput,error);
    nslConnect(be.tss,tss);
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int inSize;
	int hidSize;
	int outSize;

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public BackPropLayers(String nslName, NslModule nslParent, int inSize, int hidSize, int outSize)
{
		super(nslName, nslParent);
		this.inSize=inSize;
		this.hidSize=hidSize;
		this.outSize=outSize;
		initSys();
		makeInstBackPropLayers(nslName, nslParent, inSize, hidSize, outSize);
	}

	public void makeInstBackPropLayers(String nslName, NslModule nslParent, int inSize, int hidSize, int outSize)
{ 
		Object[] nslArgs=new Object[]{inSize, hidSize, outSize};
		callFromConstructorTop(nslArgs);
		fh = new BPForward("fh", this, inSize, hidSize);
		fo = new BPForward("fo", this, hidSize, outSize);
		be = new BPBackwardError("be", this, outSize);
		bo = new BPBackwardProp("bo", this, hidSize, outSize);
		bh = new BPBackward("bh", this, inSize, hidSize);
		in = new NslDinFloat1("in", this, inSize);
		desired = new NslDinFloat1("desired", this, outSize);
		out = new NslDoutFloat1("out", this, outSize);
		error = new NslDoutFloat1("error", this, outSize);
		tss = new NslDoutDouble0("tss", this);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end BackPropLayers

