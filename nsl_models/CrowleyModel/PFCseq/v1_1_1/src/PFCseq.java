package CrowleyModel.PFCseq.v1_1_1.src;
import CrowleyModel.IJpair.v1_1_1.src.*;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class PFCseq extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: CrowleyModel
//moduleName:  PFCseq
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinDouble2 LIPvis_in; // 
public  NslDinDouble2 PFCmem_in; // 
public  NslDinDouble2 PFCfovea_in; // 
public  NslDoutDouble2 pfcseq_out; // 
public  NslDoutDouble2 PFCseq_out; // 
private  NslDouble2 pfcsel; // 
private  NslDouble2 pfcseq; // 
private NslInt0 FOVEAX; // 
private NslInt0 FOVEAY; // 
public  IJpair tij; // 
private double pfcseqtm; // 
private double pfcselK; // 
private double pfcfoveaK; // 
private double Refractory; // 
private double SEQmax; // 
private double seqmax; // 

//methods 
public void initModule() {
     tij.init(); //initialize user class
     FOVEAX.set((NslInt0)nslGetValue("crowleyModel.FOVEAX"));
     FOVEAY.set((NslInt0)nslGetValue("crowleyModel.FOVEAY"));
}
  
public void initRun(){
    pfcseq_out.set(  0.0);
    PFCseq_out.set(  0.0);

    SEQmax=0;
    seqmax=0;
    
    pfcseqtm = 0.008;
    pfcselK = 1.5;
    pfcfoveaK = 2.0;
    Refractory = 0.025/nslGetRunDelta();
}
public void simRun(){
    int tempint;

  /// System.err.println("@@@@ PFCseq simRun entered @@@@");

    pfcseq_out.set(SetTargetSequence(LIPvis_in, pfcseq_out));

    SEQmax=NslMaxValue.eval(PFCseq_out);
    seqmax=NslMaxValue.eval(pfcseq_out);

//    if ((SEQmax < Refractory) && (seqmax > 0.0)){
    if ((NslMaxValue.eval(PFCseq_out)<Refractory)&&(NslMaxValue.eval(pfcseq_out)>0.0)){
      tempint = tij.MaxIJ(PFCmem_in);
      pfcsel.set(  0.0);
      pfcsel.set(tij.getI(), tij.getJ(),   __tempPFCseq0.setReference(PFCmem_in.get(tij.getI(), tij.getJ())));
    }

    PFCseq_out.set(  system.nsldiff.eval(PFCseq_out,pfcseqtm,
				 __tempPFCseq5.setReference(NslSub.eval(__tempPFCseq5.get(), __tempPFCseq4.setReference(NslAdd.eval(__tempPFCseq4.get(), __tempPFCseq1.setReference(NslSub.eval(__tempPFCseq1.get(), 0, PFCseq_out)), (__tempPFCseq2.setReference(NslElemMult.eval(__tempPFCseq2.get(), pfcselK, pfcsel))))), (__tempPFCseq3.setReference(NslElemMult.eval(__tempPFCseq3.get(), pfcfoveaK, PFCfovea_in)))))));

    pfcseq_out.set(  __tempPFCseq6.setReference(NslElemMult.eval(__tempPFCseq6.get(), pfcseq_out, 0.95)) );
    //pfcseq = pfcseq * 0.95;
    pfcsel.set(  __tempPFCseq7.setReference(NslElemMult.eval(__tempPFCseq7.get(), pfcsel, 0.95)) );
}

  // private methods
private NslDouble2 SetTargetSequence(NslDouble2 inmat, NslDouble2 outmat) {
    // This function set the sequence order for
    // sequentially appearing targets.
    int i, j, savei, savej, imax, jmax;
    int newtarget;
    /*
    imax = (int)inmat.get_imax();
    jmax = (int)inmat.get_jmax();
    */

    imax = (int)inmat.getSize1();
    jmax = (int)inmat.getSize2();

    savei = -1;
    savej = -1;

    newtarget = 0;             //Set to 1 when a saccade target first appears

    for ( i=0; i<imax; i++ ){
      for ( j=0; j<jmax; j++ ){
	if ( (__tempPFCseq8.setReference(inmat.get(i, j)).get()>0.5)&&(__tempPFCseq9.setReference(outmat.get(i, j)).get()==0)  ){
	  if ( (i!=FOVEAX.get())||(j!=FOVEAY.get())  ){

	    // Found a new target that is not on the fovea.  My assumption
	    // is that there are no saccadic fovea projections from cortex.
	    // Save element location so value can be set to 1 after
	    // all other target memories have been incremented

	    savei = i;
	    savej = j;
	  }
	}
      }
    }
    if ( (savei>=0)&&(savej>=0)  ){
      // New target exists.  Increment any existing target memories.

      for ( i=0; i<imax; i++ ){
	for ( j=0; j<jmax; j++ ){
	  if ( __tempPFCseq10.setReference(outmat.get(i, j)).get()>0  ){
	    outmat.set(i, j,   __tempPFCseq12.setReference(__tempPFCseq11.setReference(outmat.get(i, j)).get()+1) );
	  }
	}
      }
      outmat.set(savei, savej,   1);    //Set new target memory to 1

    }
    return outmat;
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int array_size;

	/* Temporary variables */
		NslDouble0 __tempPFCseq0 = new NslDouble0();
		NslDouble2 __tempPFCseq1 = new NslDouble2(1, 1);
		NslDouble2 __tempPFCseq2 = new NslDouble2(1, 1);
		NslDouble2 __tempPFCseq3 = new NslDouble2(1, 1);
		NslDouble2 __tempPFCseq4 = new NslDouble2(1, 1);
		NslDouble2 __tempPFCseq5 = new NslDouble2(1, 1);
		NslDouble2 __tempPFCseq6 = new NslDouble2(1, 1);
		NslDouble2 __tempPFCseq7 = new NslDouble2(1, 1);
		NslDouble0 __tempPFCseq8 = new NslDouble0();
		NslDouble0 __tempPFCseq9 = new NslDouble0();
		NslDouble0 __tempPFCseq10 = new NslDouble0();
		NslDouble0 __tempPFCseq11 = new NslDouble0();
		NslDouble0 __tempPFCseq12 = new NslDouble0();

	/* GENERIC CONSTRUCTOR: */
	public PFCseq(String nslName, NslModule nslParent, int array_size)
{
		super(nslName, nslParent);
		this.array_size=array_size;
		initSys();
		makeInstPFCseq(nslName, nslParent, array_size);
	}

	public void makeInstPFCseq(String nslName, NslModule nslParent, int array_size)
{ 
		Object[] nslArgs=new Object[]{array_size};
		callFromConstructorTop(nslArgs);
		LIPvis_in = new NslDinDouble2("LIPvis_in", this, array_size, array_size);
		PFCmem_in = new NslDinDouble2("PFCmem_in", this, array_size, array_size);
		PFCfovea_in = new NslDinDouble2("PFCfovea_in", this, array_size, array_size);
		pfcseq_out = new NslDoutDouble2("pfcseq_out", this, array_size, array_size);
		PFCseq_out = new NslDoutDouble2("PFCseq_out", this, array_size, array_size);
		pfcsel = new NslDouble2("pfcsel", this, array_size, array_size);
		pfcseq = new NslDouble2("pfcseq", this, array_size, array_size);
		FOVEAX = new NslInt0("FOVEAX", this);
		FOVEAY = new NslInt0("FOVEAY", this);
		tij = new IJpair("tij", this);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end PFCseq

