package CrowleyModel.MedBulk.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class MedBulk extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: CrowleyModel
//moduleName:  MedBulk
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDoutInt2 SNRMapCount_bulk; // 
public  NslDoutDouble3 SNRweights_bulk; // 
public  NslDoutInt3 SNRxmap_bulk; // 
public  NslDoutInt3 SNRymap_bulk; // 
public  NslDoutInt3 FEFxmap_bulk; // 
public  NslDoutInt3 FEFymap_bulk; // 
public  NslDoutInt3 LIPxmap_bulk; // 
public  NslDoutInt3 LIPymap_bulk; // 
public  NslDoutInt3 PFCxmap_bulk; // 
public  NslDoutInt3 PFCymap_bulk; // 

//methods 
public void initModule()
  {
    SNRMapCount_bulk.set(0);
    SNRweights_bulk.set(0);
    SNRxmap_bulk.set(0);
    SNRymap_bulk.set(0);
//nslPrintln("Bulk FEFxmap_bulk:"+FEFxmap_bulk);
    FEFxmap_bulk.set(0);
    FEFymap_bulk.set(0);
//nslPrintln("Bulk FEFxmap_bulk:"+medbulk1.FEFxmap_bulk);
    LIPxmap_bulk.set(0);
    LIPymap_bulk.set(0);
    PFCxmap_bulk.set(0);
    PFCymap_bulk.set(0);
  }
  public void initRun()
  {
//System.out.println("MedBulk SNRxmap:"+SNRxmap_bulk);
  }
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int CorticalArraySize;
	int MaxConnections;

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public MedBulk(String nslName, NslModule nslParent, int CorticalArraySize, int MaxConnections)
{
		super(nslName, nslParent);
		this.CorticalArraySize=CorticalArraySize;
		this.MaxConnections=MaxConnections;
		initSys();
		makeInstMedBulk(nslName, nslParent, CorticalArraySize, MaxConnections);
	}

	public void makeInstMedBulk(String nslName, NslModule nslParent, int CorticalArraySize, int MaxConnections)
{ 
		Object[] nslArgs=new Object[]{CorticalArraySize, MaxConnections};
		callFromConstructorTop(nslArgs);
		SNRMapCount_bulk = new NslDoutInt2("SNRMapCount_bulk", this, CorticalArraySize, CorticalArraySize);
		SNRweights_bulk = new NslDoutDouble3("SNRweights_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		SNRxmap_bulk = new NslDoutInt3("SNRxmap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		SNRymap_bulk = new NslDoutInt3("SNRymap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		FEFxmap_bulk = new NslDoutInt3("FEFxmap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		FEFymap_bulk = new NslDoutInt3("FEFymap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		LIPxmap_bulk = new NslDoutInt3("LIPxmap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		LIPymap_bulk = new NslDoutInt3("LIPymap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		PFCxmap_bulk = new NslDoutInt3("PFCxmap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		PFCymap_bulk = new NslDoutInt3("PFCymap_bulk", this, CorticalArraySize, CorticalArraySize, MaxConnections);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end MedBulk

