package CrowleyModel.CrowleyModel.v1_1_1.src;
import CrowleyModel.VISINPUT.v1_1_1.src.*;
import CrowleyModel.LC.v1_1_1.src.*;
import CrowleyModel.LIP.v1_1_1.src.*;
import CrowleyModel.Thal.v1_1_1.src.*;
import CrowleyModel.Med.v1_1_1.src.*;
import CrowleyModel.Lat.v1_1_1.src.*;
import CrowleyModel.SNC.v1_1_1.src.*;
import CrowleyModel.PFC.v1_1_1.src.*;
import CrowleyModel.SC.v1_1_1.src.*;
import CrowleyModel.FEF.v1_1_1.src.*;
import CrowleyModel.BSG.v1_1_1.src.*;
import CrowleyModel.DoubleSaccade.v1_1_1.src.*;
import CrowleyModel.GapSaccade.v1_1_1.src.*;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class CrowleyModel extends NslModel{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: CrowleyModel
//moduleName:  CrowleyModel
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  VISINPUT visinput; // 
public  LC lc; // 
public  LIP lip; // 
public  Thal thal1; // 
public  Med med; // 
public  Lat lat; // 
public  SNC snc; // 
public  PFC pfc; // 
public  SC sc; // 
public  FEF fef; // 
public  BSG bsg; // 
private final int CorticalArraySize=9; // 
private final int StriatalArraySize=90; // 
private int half_CorticalArraySize=(int)(CorticalArraySize/2 ); // 
private  NslInt0 FOVEAX; // 
private  NslInt0 FOVEAY; // 
public  DoubleSaccade doubleSaccade; // 
public  GapSaccade gapSaccade; // 

//methods 
public void initSys()
{
	system.setEndTime(0.55);
	system.nslSetBuffering(true);  //all output ports will be double buffered
}

public void initModule()
{
	FOVEAX.set(half_CorticalArraySize);
	FOVEAY.set(half_CorticalArraySize);
	system.nslSetRunDelta(0.001);
	nslSetRunDelta(0.001);
	system.nslSetBuffering(true);  //all output ports will be double buffered

	nslDeclareProtocol("gap", "Gap Saccade");
	nslDeclareProtocol("double", "Double Saccade");
          
	system.addProtocolToAll("gap");
	system.addProtocolToAll("double");
}

public void gapProtocol() 
{
	doubleSaccade.hide("Independent");
	gapSaccade.show("Independent");
}

public void doubleProtocol() 
{
	gapSaccade.hide("Independent");
	doubleSaccade.show("Independent");
}
public void makeConn(){
    nslConnect(lip.LIPvis_out,pfc.LIPvis_in);
    nslConnect(lip.LIPmem_out,thal1.LIPmem_in);
    nslConnect(lip.LIPmem_out,med.LIPmem_in);
    nslConnect(lip.LIPmem_out,pfc.LIPmem_in);
    nslConnect(lip.LIPmem_out,fef.LIPmem_in);
    nslConnect(lip.LIPmem_out,sc.LIPmem_in);
    nslConnect(lc.LimbicCortex_out,snc.LimbicCortex_in);
    nslConnect(snc.SNCdop_out,med.SNCdop_in);
    nslConnect(snc.SNCdop_out,lat.SNCdop_in);
    nslConnect(med.SNRmedburst_out,thal1.SNRmedburst_in);
    nslConnect(fef.FEFmem_out,thal1.FEFmem_in);
    nslConnect(fef.FEFsac_out,med.FEFsac_in);
    nslConnect(fef.FEFsac_out,lat.FEFsac_in);
    nslConnect(fef.FEFsac_out,sc.FEFsac_in);
    nslConnect(thal1.ThPFCmem_out,pfc.ThPFCmem_in);
    nslConnect(thal1.ThFEFmem_out,fef.ThFEFmem_in);
    nslConnect(thal1.ThLIPmem_out,lip.ThLIPmem_in);
    nslConnect(pfc.PFCfovea_out,lat.PFCfovea_in);
    nslConnect(pfc.PFCfovea_out,sc.PFCfovea_in);
    nslConnect(pfc.PFCgo_out,med.PFCgo_in);
    nslConnect(pfc.PFCgo_out,lat.PFCgo_in);
    nslConnect(pfc.PFCgo_out,fef.PFCgo_in);
    nslConnect(pfc.PFCmem_out,thal1.PFCmem_in);
    nslConnect(pfc.PFCmem_out,fef.PFCmem_in);
    nslConnect(lat.SNRlatburst_out,sc.SNRlatburst_in);
    nslConnect(sc.SCsac_out,bsg.SCsac_in);
    nslConnect(sc.SCbu_out,bsg.SCbu_in);
    nslConnect(bsg.BSGsaccade_out,sc.BSGsaccade_in);
    nslConnect(bsg.BSGEyeMovement_out,sc.BSGEyeMovement_in);
    nslConnect(visinput.visinput_out,lip.SLIPvis_in);
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* EMPTY CONSTRUCTOR: Called only for the top level module */
	public CrowleyModel() {
		super("crowleyModel",(NslModel)null);
		initSys();
		makeInstCrowleyModel("crowleyModel",null);
	}

	/* Formal parameters */

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public CrowleyModel(String nslName, NslModule nslParent)
{
		super(nslName, nslParent);
		initSys();
		makeInstCrowleyModel(nslName, nslParent);
	}

	public void makeInstCrowleyModel(String nslName, NslModule nslParent)
{ 
		Object[] nslArgs=new Object[]{};
		callFromConstructorTop(nslArgs);
		visinput = new VISINPUT("visinput", this, CorticalArraySize);
		lc = new LC("lc", this, CorticalArraySize);
		lip = new LIP("lip", this, CorticalArraySize);
		thal1 = new Thal("thal1", this, CorticalArraySize);
		med = new Med("med", this, CorticalArraySize, StriatalArraySize);
		lat = new Lat("lat", this, CorticalArraySize);
		snc = new SNC("snc", this, CorticalArraySize);
		pfc = new PFC("pfc", this, CorticalArraySize);
		sc = new SC("sc", this, CorticalArraySize);
		fef = new FEF("fef", this, CorticalArraySize);
		bsg = new BSG("bsg", this, CorticalArraySize);
		FOVEAX = new NslInt0("FOVEAX", this, half_CorticalArraySize);
		FOVEAY = new NslInt0("FOVEAY", this, half_CorticalArraySize);
		doubleSaccade = new DoubleSaccade("doubleSaccade", this, visinput, med);
		gapSaccade = new GapSaccade("gapSaccade", this, visinput);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end CrowleyModel

