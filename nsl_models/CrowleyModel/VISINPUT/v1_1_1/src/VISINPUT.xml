<module>
	<library>CrowleyModel</library>
	<name>VISINPUT</name>
	<version>1_1_1</version>
	<type>NslJavaModule</type>
	<getCurrentVersion>true</getCurrentVersion>
	<arguments>int array_size</arguments>
	<buffering>false</buffering>
	<imports>
	</imports>
	<variables>
		<variable type="OutputPort">
			<name>visinput_out</name>
			<access>public</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDoutDouble</categoryType>
			<dimensions>2</dimensions>
			<type>NslDoutDouble2</type>
			<params>array_size,array_size</params>
			<inits></inits>
			<comment></comment>
			<buffering>false</buffering>
			<iconDirection>L</iconDirection>
			<schDirection>L</schDirection>
			<signalType>O</signalType>
		</variable>
		<variable type="BasicVariable">
			<name>NINE</name>
			<access>private</access>
			<scope>local</scope>
			<constant>true</constant>
			<categoryType>int</categoryType>
			<dimensions>0</dimensions>
			<type>int</type>
			<params></params>
			<inits>9</inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>retinatm</name>
			<access>private</access>
			<scope>local</scope>
			<constant>true</constant>
			<categoryType>double</categoryType>
			<dimensions>0</dimensions>
			<type>double</type>
			<params></params>
			<inits>0.004</inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>cycle</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>int</categoryType>
			<dimensions>0</dimensions>
			<type>int</type>
			<params></params>
			<inits>0</inits>
			<comment></comment>
		</variable>
		<variable type="BasicVariable">
			<name>retina</name>
			<access>private</access>
			<scope>local</scope>
			<constant>false</constant>
			<categoryType>NslDouble</categoryType>
			<dimensions>2</dimensions>
			<type>NslDouble2</type>
			<params>array_size, array_size</params>
			<inits></inits>
			<comment></comment>
		</variable>
		<variable type="SubModule">
			<name>InputIlluminations</name>
			<access>public</access>
			<scope>local</scope>
			<type>Illuminations</type>
			<params></params>
			<inits></inits>
			<comment></comment>
			<library>CrowleyModel</library>
			<version>v1_1_1</version>
			<getCurrentVersion>true</getCurrentVersion>
		</variable>
		<variable type="SubModule">
			<name>dummy</name>
			<access>public</access>
			<scope>local</scope>
			<type>Illumination</type>
			<params></params>
			<inits></inits>
			<comment></comment>
			<library>CrowleyModel</library>
			<version>v1_1_1</version>
			<getCurrentVersion>true</getCurrentVersion>
		</variable>
	</variables>
	<icon>
		<library>CrowleyModel</library>
		<module>VISINPUT</module>
		<version>1_1_1</version>
		<bounds>
			<min>
				<x>0</x>
				<y>0</y>
			</min>
			<max>
				<x>96</x>
				<y>64</y>
			</max>
		</bounds>
		<shape>
			<min>
				<x>0</x>
				<y>0</y>
			</min>
			<max>
				<x>72</x>
				<y>64</y>
			</max>
		</shape>
		<parts>
			<part type="rect">
				<bounds>
					<min>
						<x>0</x>
						<y>0</y>
					</min>
					<max>
						<x>72</x>
						<y>64</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>0</x>
						<y>0</y>
					</coordinate>
					<coordinate>
						<x>72</x>
						<y>64</y>
					</coordinate>
				</coordinates>
			</part>
			<part type="NslDoutDouble2">
				<name>visinput_out</name>
				<parameters>array_size,array_size</parameters>
				<portDirection>L</portDirection>
				<signalType>O</signalType>
				<bounds>
					<min>
						<x>72</x>
						<y>32</y>
					</min>
					<max>
						<x>96</x>
						<y>32</y>
					</max>
				</bounds>
				<color>-16711936</color>
				<coordinates>
					<coordinate>
						<x>72</x>
						<y>32</y>
					</coordinate>
					<coordinate>
						<x>96</x>
						<y>32</y>
					</coordinate>
				</coordinates>
			</part>
		</parts>
	</icon>
	<schematic>
		<inports>
		</inports>
		<outports>
			<outport>
				<name>visinput_out</name>
				<type>NslDoutDouble2</type>
				<parameters>array_size,array_size</parameters>
				<portDirection>L</portDirection>
				<corners>
					<corner>
						<x>528</x>
						<y>144</y>
					</corner>
					<corner>
						<x>540</x>
						<y>144</y>
					</corner>
					<corner>
						<x>552</x>
						<y>160</y>
					</corner>
					<corner>
						<x>540</x>
						<y>176</y>
					</corner>
					<corner>
						<x>528</x>
						<y>176</y>
					</corner>
				</corners>
				<bounds>
					<min>
						<x>512</x>
						<y>160</y>
					</min>
					<max>
						<x>528</x>
						<y>160</y>
					</max>
				</bounds>
			</outport>
		</outports>
		<textObjects>
		</textObjects>
		<icons>
			<iconInstance>
				<instanceName>dummy</instanceName>
				<getCurrentVersion>true</getCurrentVersion>
				<parameters></parameters>
				<icon>
					<library>CrowleyModel</library>
					<module>Illumination</module>
					<version>1_1_1</version>
					<bounds>
						<min>
							<x>160</x>
							<y>120</y>
						</min>
						<max>
							<x>260</x>
							<y>220</y>
						</max>
					</bounds>
					<shape>
						<min>
							<x>160</x>
							<y>120</y>
						</min>
						<max>
							<x>260</x>
							<y>220</y>
						</max>
					</shape>
					<parts>
						<part type="rect">
							<bounds>
								<min>
									<x>0</x>
									<y>0</y>
								</min>
								<max>
									<x>100</x>
									<y>100</y>
								</max>
							</bounds>
							<color>-1</color>
							<coordinates>
								<coordinate>
									<x>0</x>
									<y>0</y>
								</coordinate>
								<coordinate>
									<x>100</x>
									<y>100</y>
								</coordinate>
							</coordinates>
						</part>
					</parts>
				</icon>
			</iconInstance>
		</icons>
		<connections>
		</connections>
	</schematic>
	<nslm>
		<extends></extends>
		<extendsParams></extendsParams>
		<implements></implements>
		<comment> Here is the class representing the input module from s.C.
 In old NSL it is an input array, but since NSLJ does not have
 input arrays yet we make them static arrays.</comment>
		<methods>public void initModule()
{
	InputIlluminations.initIlluminations();
	nslAddAreaCanvas("output", "input", visinput_out, 0.0, 100.0);
}

public void initRun(){
	visinput_out = 0;
	retina = 0;
	cycle  = 0;
	
	/** for demo purpose only */
	/* Commented out Illuminations in initRun() (JS 10/14/97) */
	/*
	    Illumination ve;
	    Illumination (4,4,0,0.0,0.2) ve  ;
	    InputIlluminations.getIlluminationList().addElement(ve);
	    Illumination (0,0,60,0.050,0.150) ve  ;
	    InputIlluminations.getIlluminationList().addElement(ve);
	    Illumination (2,1,60,0.100,0.200) ve  ;
	    InputIlluminations.getIlluminationList().addElement(ve);
	*/

	// 96/12/20 aa
	// nslPrintln("InputIlluminations:\n" + InputIlluminations+"\n");
    }

    public void simRun(){
	// System.err.println("@@@@ VISINPUT simRun entered @@@@");

	/*
	    CurrentTime = rint( ( SACCADE.get_time() * 10000.0 ));
	    CurrentTime = CurrentTime / 10000.0;

	    nslPrintln("Time: "+ setprecision(4) + setw(8) + CurrentTime);
	*/

	CheckInput( visinput_out, InputIlluminations );
	retina = nslDiff(retina,retinatm, -retina + visinput_out);

	// 96/12/20 aa
	cycle=cycle+1;
	// nslPrintln("cycle " + cycle);  took out Jan 21 1998 - aa
	// nslPrintln("visinput_out " + visinput_out);
    }
  
    // Allow manipulation of events (JS 10/9/97)

public void resetIlluminations() 
{
	InputIlluminations.RemoveIlluminations();
}

public void addIllumination(int x, int y, double act, double ts, double te)
{
	InputIlluminations.addIllumination(new Illumination(x,y,act,ts,te));
}

// This function processes the visual events established for the current
// experiment at the start of each time step.  If a new visual event has
// started, the appropriate matrix element in visinput is activated.  If a
// visual event has expired, the corresponding visinput element is set to 0.

public NslDouble2 CheckInput(NslDouble2 visinput, Illuminations events) {
	double cur_time = 0;
	Illumination cur;
	int i;
	java.util.Enumeration e;

	cur_time = system.getCurTime();
	if(events != null &amp;&amp; events.getIlluminationList()!=null)
	{
		e  = ((java.util.Vector)events.getIlluminationList()).elements();

		while (e.hasMoreElements()) {
		    // Check start time for an event
		    cur = (Illumination)e.nextElement();
		    if (cur_time &gt;= cur.getStart()) {
			// Set visinput array element to event activation value
			visinput[cur.getX()][cur.getY()] = 0+cur.getValue();
		    }
		    if (cur_time &gt;=cur.getStop()) {
			// Illumination is done, set visinput element to 0
			visinput[cur.getX()][cur.getY()] = 0.0;
		    }
		}
	}

	return visinput;
    }








</methods>
	</nslm>
</module>
