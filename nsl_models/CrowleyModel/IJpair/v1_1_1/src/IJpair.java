package CrowleyModel.IJpair.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class IJpair extends NslClass{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: CrowleyModel
//moduleName:  IJpair
//versionName: 1_1_1
//floatSubModules: true


//variables 
private int i; // 
private int j; // 

//methods 
public void callFromConstructorBottom(){
    i = 0;
    j = 0;
  }

  public void init() {
    i = 0;
    j = 0;
  }


  public int MaxIJ( NslDouble2 inmat ) {
    // Returns the i,j location of the maximum value element in the 
    // matrix passed as input

    // 99/8/2 aa: this would be better as nslMaxElem
    // pass out an array of values

    int    ic, jc;
    int    imax, jmax;
    int    foundmax;
    double max;

    foundmax = 0;
    max = -0.5;

    imax = inmat.getSize1();
    jmax = inmat.getSize2();

    for ( ic=0; ic<imax; ic++ ){
      for ( jc=0; jc<jmax; jc++ ){
	if ( __tempIJpair0.setReference(inmat.get(ic, jc)).get()>max  ) {
	  max = (double)__tempIJpair1.setReference(inmat.get(ic, jc)).get();
	  foundmax = 1;
	  i = ic; 
	  j = jc;
	}
      }
    }
    if ( foundmax!=0 )
      return 0;     //No positive maximum value

    return 1;
  }
  
  public int getI(){
    return i;
  }
  public int getJ(){
    return j;
  }
public void makeConn(){}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */

	/* Temporary variables */
		NslDouble0 __tempIJpair0 = new NslDouble0();
		NslDouble0 __tempIJpair1 = new NslDouble0();

	/* GENERIC CONSTRUCTOR: */
	public IJpair(String nslName, NslModule nslParent)
{
		super(nslName, nslParent);
		makeInstIJpair(nslName, nslParent);
	}


	public IJpair(String nslName, NslClass nslParent) {
		super(nslName, nslParent);
		makeInstIJpair(nslName, nslParent);
	}

	public void makeInstIJpair(String nslName, NslModule nslParent)
{ 
		Object[] nslArgs=new Object[]{};
		callFromConstructorTop(nslArgs);
		callFromConstructorBottom();
	}

	public void makeInstIJpair(String nslName, NslClass nslParent) { 
		Object[] nslArgs=new Object[]{};
		callFromConstructorTop(nslArgs);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end IJpair

