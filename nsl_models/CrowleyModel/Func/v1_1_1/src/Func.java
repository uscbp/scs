/** 
This class contains the SetCD function from lib.h file
*/
package CrowleyModel.Func.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class Func extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: CrowleyModel
//moduleName:  Func
//versionName: 1_1_1
//floatSubModules: true


//variables 
private final int MaxConnections=50; // 

//methods 
// This function is also called by other functions in the lib.h file:
// MapToFovea, MapToOffset, TestConnections, TestFoveaMapping
public int SetCD (NslDouble2 CD, NslInt3 xmap, NslInt3 ymap, NslDouble2 mat) 
{
	//  This function maps the cortical excitation onto the CD based on the
	//  nslConnectections established in the xmap and ymap arrays

	int i, j, k, loc;
	NslInt0 xmaploc= new  NslInt0("xmaploc", this), ymaploc= new  NslInt0("ymaploc",this);

	 
		if (CD==null)
		{ 
			System.err.println("********** CD NULL!!!!");
			System.exit(0);
		}
		if (xmap==null) 
		{
			System.err.println("********** xmap NULL!!!!");
			System.exit(0);
		}
		if (ymap==null)
		{
			System.err.println("********** ymap NULL!!!!");
			System.exit(0);
		}
		if (mat==null)
		{
			System.err.println("********** mat NULL!!!!");
			System.exit(0);
		}
	 
 
	for (i = 0; i<CorticalArraySize ; i ++)
	{
		for (j = 0; j<CorticalArraySize ; j ++) 
		{
			if (__tempFunc0.setReference(mat.get(i, j)).get()!=0 )
			{
				// Found an active cortical neuron
				for (k = 0; k<MaxConnections ; k ++) 
				{
					// loc = ( MaxConnections * j ) + k + 
					// ( MaxConnections * CorticalArraySize * i );
					xmaploc.set(  __tempFunc1.setReference(xmap.get(i, j, k))); ymaploc.set(  __tempFunc2.setReference(ymap.get(i, j, k)));
					// xmaploc = *(xmap+loc); ymaploc = *(ymap+loc);
					if ((xmaploc.get()!=0)||(ymaploc.get()!=0)) 
					{
						CD.set( xmaploc.get(), ymaploc.get(),   __tempFunc3.setReference(mat.get( i, j)));
					}
				}
			}
		}
	}
	return 0;
}
public void makeConn(){}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int CorticalArraySize;

	/* Temporary variables */
		NslDouble0 __tempFunc0 = new NslDouble0();
		NslInt0 __tempFunc1 = new NslInt0();
		NslInt0 __tempFunc2 = new NslInt0();
		NslDouble0 __tempFunc3 = new NslDouble0();

	/* GENERIC CONSTRUCTOR: */
	public Func(String nslName, NslModule nslParent, int CorticalArraySize)
{
		super(nslName, nslParent);
		this.CorticalArraySize=CorticalArraySize;
		initSys();
		makeInstFunc(nslName, nslParent, CorticalArraySize);
	}

	public void makeInstFunc(String nslName, NslModule nslParent, int CorticalArraySize)
{ 
		Object[] nslArgs=new Object[]{CorticalArraySize};
		callFromConstructorTop(nslArgs);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end Func

