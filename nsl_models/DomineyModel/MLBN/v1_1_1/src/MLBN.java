package DomineyModel.MLBN.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class MLBN extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: DomineyModel
//moduleName:  MLBN
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinFloat2 stm; // input - spatio temporal transformations
public  NslDinFloat2 llbn; // 
public  NslDoutFloat2 mlbn; // 
private NslFloat0 mlbnPot_tm; // 
private NslFloat0 mlbn_kx1; // 
private NslFloat0 mlbn_kx2; // 
private NslFloat0 mlbn_ky1; // 
private NslFloat0 mlbn_ky2; // 
private  NslFloat2 mlbnPot; // medium lead burst neurons of the brainstem saccade generator

//methods 
public void initRun() 
{
	mlbn.set(0);
	mlbnPot.set(0);

	mlbnPot_tm.set(0.008);
	mlbn_kx1.set(0);
	mlbn_kx2.set(1500);
	mlbn_ky1.set(0);
	mlbn_ky2.set(950);

}

public void simRun() 
{
	// leftSTM, rightSTM etc have weights that increase with distance from fovea
	// performing the SpatioTeMporal transformation.
	// ^ = pointwise multiplication
	// medium lead burst neurons - see Hepp and Henn (in refs) for details.

	mlbnPot.set(system.nsldiff.eval(mlbnPot,mlbnPot_tm, __tempMLBN2.setReference(NslAdd.eval(__tempMLBN2.get(), __tempMLBN0.setReference(NslSub.eval(__tempMLBN0.get(), 0, mlbnPot)), (__tempMLBN1.setReference(NslElemMult.eval(__tempMLBN1.get(), stm, llbn)))))));
	mlbn.set(  NslSaturation.eval(mlbnPot,mlbn_kx1,mlbn_kx2,mlbn_ky1,mlbn_ky2));
	if (system.debug>=7) 
	{
		system.nslPrintln("debug: MLBN");
		system.nslPrintln(mlbn);
	}
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int stdsz;

	/* Temporary variables */
		NslFloat2 __tempMLBN0 = new NslFloat2(1, 1);
		NslFloat2 __tempMLBN1 = new NslFloat2(1, 1);
		NslFloat2 __tempMLBN2 = new NslFloat2(1, 1);

	/* GENERIC CONSTRUCTOR: */
	public MLBN(String nslName, NslModule nslParent, int stdsz)
{
		super(nslName, nslParent);
		this.stdsz=stdsz;
		initSys();
		makeInstMLBN(nslName, nslParent, stdsz);
	}

	public void makeInstMLBN(String nslName, NslModule nslParent, int stdsz)
{ 
		Object[] nslArgs=new Object[]{stdsz};
		callFromConstructorTop(nslArgs);
		stm = new NslDinFloat2("stm", this, stdsz, stdsz);
		llbn = new NslDinFloat2("llbn", this, stdsz, stdsz);
		mlbn = new NslDoutFloat2("mlbn", this, stdsz, stdsz);
		mlbnPot_tm = new NslFloat0("mlbnPot_tm", this);
		mlbn_kx1 = new NslFloat0("mlbn_kx1", this);
		mlbn_kx2 = new NslFloat0("mlbn_kx2", this);
		mlbn_ky1 = new NslFloat0("mlbn_ky1", this);
		mlbn_ky2 = new NslFloat0("mlbn_ky2", this);
		mlbnPot = new NslFloat2("mlbnPot", this, stdsz, stdsz);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end MLBN

