package DomineyModel.LLBN.v1_1_1.src;
import DomineyModel.DomineyLib.v1_1_1.src.*;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class LLBN extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: DomineyModel
//moduleName:  LLBN
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinFloat2 supcol; // 
public  NslDinFloat2 fefsac; // 
public  NslDoutFloat2 llbn; // 
private NslFloat0 llbnPot_tm; // 
private NslFloat0 llbnPot_k1; // 
private NslFloat0 llbnPot_k3; // 
private NslFloat0 llbn_kx1; // 
private NslFloat0 llbn_kx2; // 
private NslFloat0 llbn_ky1; // 
private NslFloat0 llbn_ky2; // 
private  NslFloat2 llbnwta; // 
private  NslFloat2 llbnPot; // long lead burst neurons of the brainstem saccade
private NslFloat0 nWTAThreshold; // 
private NslFloat0 protocolNum; // 
public  DomineyLib domineyLib; // 

//methods 
public void initModule() 
{
	llbnPot_k1.nslSetAccess('W');  // adaptaion factor for lesion FEF
	llbnPot_k3.nslSetAccess('W');  // adaptaion factor for lesion SCS
}

public void initRun() 
{
	nWTAThreshold.set((NslFloat0)nslGetValue("domineyModel.nWTAThreshold"));
	protocolNum.set((NslInt0)nslGetValue("domineyModel.protocolNum"));

	llbn.set(0);
	llbnwta.set(0);
	llbnPot.set(0);
        
	llbnPot_tm.set(  0.08);
	// aa: From the 92 paper is says that the connection strength
	// from SC to LLBN
	// is increase from 2.67 to 5.0 for 14
	// However this is not in the 2.1.7 stimulus file.
	llbnPot_k1.set(  2.67);
	if (protocolNum.get()==14) 
	{
		llbnPot_k1.set(  5.0); // aa: lesioning of FEF causes
				// SC projections to LLBN to increase
	}
	// aa: From the 92 paper is says that the connection strength
	// from FEF to LLBN
	// is increase from 5.4 to 9.4 for 13
	// However this is not in the 2.1.7 stimulus file.
	llbnPot_k3.set(  5.4);
	if (protocolNum.get()==13)
	{
		 llbnPot_k3.set(  9.4); // aa: lesioning of SC causes 
			// FEF projections to LLBN to increase
	}

	llbn_kx1.set(  0);
	llbn_kx2.set(  950);
	llbn_ky1.set(  0);
	llbn_ky2.set(  950); 
}

public void simRun()
{
	llbnPot.set(system.nsldiff.eval(llbnPot,llbnPot_tm,__tempLLBN4.setReference(NslAdd.eval(__tempLLBN4.get(), __tempLLBN3.setReference(NslAdd.eval(__tempLLBN3.get(), __tempLLBN0.setReference(NslSub.eval(__tempLLBN0.get(), 0, llbnPot)), __tempLLBN1.setReference(NslElemMult.eval(__tempLLBN1.get(), llbnPot_k1, supcol)))), __tempLLBN2.setReference(NslElemMult.eval(__tempLLBN2.get(), llbnPot_k3, fefsac))))));	// 		// visualinput from SC and FEF
	llbnwta.set(  domineyLib.winnerTakeAll(llbnPot,nWTAThreshold.get(),stdsz));

		// the winner take all is what allows a stimulated
		// saccade to interrupt an ongoing saccade - 
		// implies that weighted averageing occurs upstream

		// note that in the double saccades, the llbnPot (membrane
		// Potential) layer sometimes shows activity at multiple sites

	llbn.set(  NslSaturation.eval(llbnwta,llbn_kx1,llbn_kx2,llbn_ky1,llbn_ky2));

	if (system.debug>=5) 
	{
		system.nslPrintln("debug: LLBN: ");
		system.nslPrintln(llbn);
	}
}
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */
	int stdsz;

	/* Temporary variables */
		NslFloat2 __tempLLBN0 = new NslFloat2(1, 1);
		NslFloat2 __tempLLBN1 = new NslFloat2(1, 1);
		NslFloat2 __tempLLBN2 = new NslFloat2(1, 1);
		NslFloat2 __tempLLBN3 = new NslFloat2(1, 1);
		NslFloat2 __tempLLBN4 = new NslFloat2(1, 1);

	/* GENERIC CONSTRUCTOR: */
	public LLBN(String nslName, NslModule nslParent, int stdsz)
{
		super(nslName, nslParent);
		this.stdsz=stdsz;
		initSys();
		makeInstLLBN(nslName, nslParent, stdsz);
	}

	public void makeInstLLBN(String nslName, NslModule nslParent, int stdsz)
{ 
		Object[] nslArgs=new Object[]{stdsz};
		callFromConstructorTop(nslArgs);
		supcol = new NslDinFloat2("supcol", this, stdsz, stdsz);
		fefsac = new NslDinFloat2("fefsac", this, stdsz, stdsz);
		llbn = new NslDoutFloat2("llbn", this, stdsz, stdsz);
		llbnPot_tm = new NslFloat0("llbnPot_tm", this);
		llbnPot_k1 = new NslFloat0("llbnPot_k1", this);
		llbnPot_k3 = new NslFloat0("llbnPot_k3", this);
		llbn_kx1 = new NslFloat0("llbn_kx1", this);
		llbn_kx2 = new NslFloat0("llbn_kx2", this);
		llbn_ky1 = new NslFloat0("llbn_ky1", this);
		llbn_ky2 = new NslFloat0("llbn_ky2", this);
		llbnwta = new NslFloat2("llbnwta", this, stdsz, stdsz);
		llbnPot = new NslFloat2("llbnPot", this, stdsz, stdsz);
		nWTAThreshold = new NslFloat0("nWTAThreshold", this);
		protocolNum = new NslFloat0("protocolNum", this);
		domineyLib = new DomineyLib("domineyLib", this);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end LLBN

