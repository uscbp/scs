package DartModel.PP_layer.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class PP_layer extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: DartModel
//moduleName:  PP_layer
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDoutDouble0 s_out; // Strategy: [0:1] over/under
public  NslDoutDouble2 pp_out; // PP population coding
private double sx2=12.25; // 3.5*3.5
private double sy2=9; // 3*3
private NslDouble0 a_out; // Aim direction [-30:30]
private NslDouble0 pp_noise; // 
private NslDouble0 pp_sep; // 

//methods 
public void initModule()
{
	pp_noise.set(  (NslDouble0)nslGetValue("dartModel.pp_noise"));
	pp_sep.set(    (NslDouble0)nslGetValue("dartModel.pp_sep"));
}
 
public void simTrain() 
{
	simRun();
}
 
public void simRun()
{
	int i,j;
	NslDouble0 mx = new NslDouble0();
        NslDouble0 my = new NslDouble0();
        
	NslDouble0 dx = new NslDouble0();
        NslDouble0 dy = new NslDouble0();
        

	s_out.set(  (NslDouble0)nslGetValue("dartModel.s_out"));
	a_out.set(  (NslDouble0)nslGetValue("dartModel.d_out"));
     
	my.set(  __tempPP_layer2.setReference(4.5+__tempPP_layer1.setReference(__tempPP_layer0.setReference(NslStep.eval(s_out,.5,-1,1)*pp_sep.get()).get()/2.).get())); // throw = over/under
	mx.set(  __tempPP_layer5.setReference(4.5+__tempPP_layer4.setReference(__tempPP_layer3.setReference(4.5*a_out.get()).get()/30.).get()));
     
	for(i=0;i<10;i++)
	{
		dx.set(  __tempPP_layer6.setReference(mx.get()-i) );
		for(j=0;j<10;j++)
		{
			dy.set(  __tempPP_layer7.setReference(my.get()-j) );
			pp_out.set(i, j,   __tempPP_layer17.setReference(__tempPP_layer8.setReference(pp_noise.get()*NslRandom.eval()).get()+__tempPP_layer16.setReference((__tempPP_layer9.setReference(1.-pp_noise.get())).get()*NslOperator.exp.eval(__tempPP_layer15.setReference(-1.*(__tempPP_layer14.setReference(__tempPP_layer11.setReference(__tempPP_layer10.setReference(dx.get()*dx.get()).get()/sx2).get()+__tempPP_layer13.setReference(__tempPP_layer12.setReference(dy.get()*dy.get()).get()/sy2).get())).get()))).get()));
		}
	}
 }
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */

	/* Temporary variables */
		NslDouble0 __tempPP_layer0 = new NslDouble0();
		NslDouble0 __tempPP_layer1 = new NslDouble0();
		NslDouble0 __tempPP_layer2 = new NslDouble0();
		NslDouble0 __tempPP_layer3 = new NslDouble0();
		NslDouble0 __tempPP_layer4 = new NslDouble0();
		NslDouble0 __tempPP_layer5 = new NslDouble0();
		NslDouble0 __tempPP_layer6 = new NslDouble0();
		NslDouble0 __tempPP_layer7 = new NslDouble0();
		NslDouble0 __tempPP_layer8 = new NslDouble0();
		NslDouble0 __tempPP_layer9 = new NslDouble0();
		NslDouble0 __tempPP_layer10 = new NslDouble0();
		NslDouble0 __tempPP_layer11 = new NslDouble0();
		NslDouble0 __tempPP_layer12 = new NslDouble0();
		NslDouble0 __tempPP_layer13 = new NslDouble0();
		NslDouble0 __tempPP_layer14 = new NslDouble0();
		NslDouble0 __tempPP_layer15 = new NslDouble0();
		NslDouble0 __tempPP_layer16 = new NslDouble0();
		NslDouble0 __tempPP_layer17 = new NslDouble0();

	/* GENERIC CONSTRUCTOR: */
	public PP_layer(String nslName, NslModule nslParent)
{
		super(nslName, nslParent);
		initSys();
		makeInstPP_layer(nslName, nslParent);
	}

	public void makeInstPP_layer(String nslName, NslModule nslParent)
{ 
		Object[] nslArgs=new Object[]{};
		callFromConstructorTop(nslArgs);
		s_out = new NslDoutDouble0("s_out", this);
		pp_out = new NslDoutDouble2("pp_out", this, 10, 10);
		a_out = new NslDouble0("a_out", this);
		pp_noise = new NslDouble0("pp_noise", this);
		pp_sep = new NslDouble0("pp_sep", this);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end PP_layer

