package DartModel.PC_layer.v1_1_1.src;

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;
import nslj.src.display.j3d.*;

/*********************************/

public class PC_layer extends NslModule{

//NSL Version: 3_0_n
//Sif Version: 9
//libNickName: DartModel
//moduleName:  PC_layer
//versionName: 1_1_1
//floatSubModules: true


//variables 
public  NslDinDouble2 gc_in; // GC input
public  NslDinDouble1 io_in; // IO input
public  NslDoutDouble2 pc_out; // 
private double f_max=100; // 
private double offset=750; // output +- 5 for 0 input
private double slope=.005; // 
private  NslDouble1 w; // 
private  NslDouble2 pc_mp; // 
private NslDouble0 alpha; // 

//methods 
public void initModule() 
{
	alpha.set(  (NslDouble0)nslGetValue("dartModel.alpha"));
     
	// Initialize weights
	w.set(  __tempPC_layer1 = (NslAdd.eval(__tempPC_layer1, (20./((30.*30.)/3.)), (__tempPC_layer0 = (NslElemDiv.eval(__tempPC_layer0, NslRandom.eval(w,-.5,.5), 2.0))))));
	pc_out.set(  5.);
	pc_mp.set(  0.);
}

public void simTrain() 
{
	simRun();
}
 
public void endTrain() 
{
	endRun();
}

public void simRun()
{
	processGCInputs(false);   
	// Update PC cells
	pc_out.set(  __tempPC_layer2 = (NslElemMult.eval(__tempPC_layer2, f_max, NslSigmoid.eval(pc_mp,slope,offset))));
}

public void endRun() 
{
	// Learning
	processGCInputs(true);
	w.set(  NslBound.eval(w,0, 1, 0, 1));
}

private void processGCInputs(boolean endEpoch) 
{
	int px,py,gx,gy,y,wc;
	int beam_start;
	int i,j;
	// GC inputs
	pc_mp.set(  0.);
	wc = 0;
	for(px=0;px<2;px++)
	{
		for(py=0;py<5;py++)
		{
			beam_start = py*30/5;
			for(gx=0;gx<30;gx++)
			{
				for(y=0;y<10;y++)
				{
					gy = (beam_start+y)%30;
					if (!endEpoch) 
					{
						pc_mp.set(px, py,   __tempPC_layer7.setReference(__tempPC_layer3.setReference(pc_mp.get(px, py)).get()+__tempPC_layer6.setReference(__tempPC_layer4.setReference(w.get(wc)).get()*__tempPC_layer5.setReference(gc_in.get(gx, gy)).get()).get()));
					}
					else 
					{
						w.set(wc,   __tempPC_layer15.setReference(__tempPC_layer8.setReference(w.get(wc)).get()+__tempPC_layer14.setReference(__tempPC_layer13.setReference(alpha.get()*(__tempPC_layer10.setReference(__tempPC_layer9.setReference(gc_in.get(gx, gy)).get()*.01)).get()).get()*(__tempPC_layer12.setReference(__tempPC_layer11.setReference(io_in.get(px)).get()-2.)).get()).get()));
					}
					wc++;
				}
			}
		}
	}
 }
public void makeConn(){
}

	/******************************************************/
	/*                                                    */
	/* Generated by nslc.src.NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* Formal parameters */

	/* Temporary variables */
		double[] __tempPC_layer0 = new double[1];
		double[] __tempPC_layer1 = new double[1];
		double[][] __tempPC_layer2 = new double[1][1];
		NslDouble0 __tempPC_layer3 = new NslDouble0();
		NslDouble0 __tempPC_layer4 = new NslDouble0();
		NslDouble0 __tempPC_layer5 = new NslDouble0();
		NslDouble0 __tempPC_layer6 = new NslDouble0();
		NslDouble0 __tempPC_layer7 = new NslDouble0();
		NslDouble0 __tempPC_layer8 = new NslDouble0();
		NslDouble0 __tempPC_layer9 = new NslDouble0();
		NslDouble0 __tempPC_layer10 = new NslDouble0();
		NslDouble0 __tempPC_layer11 = new NslDouble0();
		NslDouble0 __tempPC_layer12 = new NslDouble0();
		NslDouble0 __tempPC_layer13 = new NslDouble0();
		NslDouble0 __tempPC_layer14 = new NslDouble0();
		NslDouble0 __tempPC_layer15 = new NslDouble0();

	/* GENERIC CONSTRUCTOR: */
	public PC_layer(String nslName, NslModule nslParent)
{
		super(nslName, nslParent);
		initSys();
		makeInstPC_layer(nslName, nslParent);
	}

	public void makeInstPC_layer(String nslName, NslModule nslParent)
{ 
		Object[] nslArgs=new Object[]{};
		callFromConstructorTop(nslArgs);
		gc_in = new NslDinDouble2("gc_in", this, 30, 30);
		io_in = new NslDinDouble1("io_in", this, 2);
		pc_out = new NslDoutDouble2("pc_out", this, 2, 5);
		w = new NslDouble1("w", this, 3000);
		pc_mp = new NslDouble2("pc_mp", this, 2, 5);
		alpha = new NslDouble0("alpha", this);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}//end PC_layer

